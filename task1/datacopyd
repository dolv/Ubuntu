#!/bin/bash
#----- Global variables declaration ---------------------------
SERVER_LIST=client_hosts
DEST_DIR=~/Ubuntu/task1/DEST
LOG_FILE=datacopyd.log
EXEC_TIME_LIMIT=$((60*5))
SCRIPT_FOLDER=$(dirname $0)
SERVER_LIST=$SCRIPT_FOLDER/$SERVER_LIST
ERROR_MESSAGE=""
EXIT_CODE=0
LOG_FILE=$SCRIPT_FOLDER/$LOG_FILE
SCRIPT=$(basename $0)
RUN_HELP="Run command like this: \r\n$SCRIPT /path_to_file/file_name or \r\n$SCRIPT /path_to_folder/folder_name"
#export LOG_FILE
# ---- Helper functions definition ----------------------------
function print_log(){
    if [ -r $LOG_FILE ]; then
        echo -e "$(date) [$SCRIPT] $1" >> "$LOG_FILE"
    else
        IFS=';' read -ra LINES <<< "$(echo "[$SCRIPT] $1" | sed 's/\\r\\n/;/g')" 
        for line in "${LINES[@]}"; do
            logger "$line"
        done
        echo -e "$1"
    fi
}

function copy_files(){
if $( ssh -q $host [ -e \"$1\" ]) ; then
    if $(ssh -q $host [ -r \"$1\" ]); then
        print_log "Processing the target $host:$1"
        tar_res=$(ssh -q $host sudo tar -czpf ~/backup.tar.gz -C \"$1\" . >/dev/null && echo ok)
        if [ "$tar_res" = "ok" ]; then
#            set -x
            scp -q $host:~/backup.tar.gz $DEST_DIR
            if [ "$(md5sum $DEST_DIR/backup.tar.gz|cut -d' ' -f1)" = \
                 "$(ssh -q $host md5sum ~/backup.tar.gz| cut -d' ' -f1)" ]; then
                print_log "Backup file successfully transferred."
                cd $DEST
                tar -xzpf $DEST_DIR/backup.tar.gz 
                echo 0
            fi
#            set +x
        else 
            print_log "Error occured while creating TAR on remote host $host"
            echo -1
        fi
    else
        print_log "Could not read file $1"
        echo -1
    fi
else
    print_log "File $1 does not exist"
fi
}


# ------- INITIAL VERIFICATIONS ------------------------
if [ $(ps aux | grep "$SCRIPT" | wc -l) -lt 2 ]; then
    ERROR_MESSAGE="Script has already been running"
    EXIT_CODE=-1
fi
 
if [ ! -r $LOG_FILE ]; then
    touch "$LOG_FILE" 2>/dev/null
else
    cat /dev/null > $LOG_FILE 
fi

if [ ! -d $DEST_DIR ]; then
    mkdir -p $DEST_DIR ||  ERROR_MESSAGE="Destination folder can not be created. Check permissions."
    EXIT_CODE=3
fi

if [ $# -le 0 ]; then
    ERROR_MESSAGE="\r\n\
Please provide source file/folder as a command line agrument \r\n$RUN_HELP\r\n\
Aborting.\r\n"
    EXIT_CODE=1
elif [ $# -gt 1 ]; then
    ERROR_MESSAGE="\r\n\
The script takes the only one command line argument\n\r$RUN_HELP\r\n\
Aborting.\r\n"
    EXIT_CODE=1
elif [ ! -s $SERVER_LIST ]; then
    ERROR_MESSAGE="\r\n\
The file containig client hosts list is empty. \r\n\
Check $SERVER_LIST file content\r\n\
Aborting.\r\n"
    EXIT_CODE=2
elif [ ! -r $SERVER_LIST ]; then
    ERROR_MESSAGE="\r\n\
The file containig client hosts list was not found. \r\n\
Check SERVER_LIST variable in the [$SCRIPT] script file\r\n\
Script is located $SCRIPT_FOLDER/$SCRIPT\r\nAborting.\r\n "
    EXIT_CODE=2
fi


if [ ! $EXIT_CODE -eq 0 ]; then
    print_log "$ERROR_MESSAGE" 
    exit $EXIT_CODE
fi

# ----------- MAIN body goes here -------------------------------
SCRIPT_INIT_TIME=$(date -u +"%s")
TIME_ELAPSED=$(( $(date -u +"%s") - $SCRIPT_INIT_TIME ))
print_log "Script execution initiated."
print_log "Script initiation string: $SCRIPT $@"
HOSTS_COUNT=$(grep -E . $SERVER_LIST | grep -E '^[^#;]' | wc -l | cut -d' ' -f 1)
export  PROCESSED_HOSTS
#set -x
IFS=$'\r\n' HOSTS=($(cat "$SERVER_LIST"| grep -E . | grep -E '^[^#;]'))
for host in "${HOSTS[@]}"; do

    print_log "$(printf "=====>Processing host [%03d/%03d] - $host " "$(($PROCESSED_HOSTS + 1))" "$HOSTS_COUNT")"
    sshcon_status=$(ssh -o BatchMode=yes -o ConnectTimeout=5 $host echo CONNECTION ESTABLISHED 2>&1)
    print_log "Trying connect to $host"
    print_log "$sshcon_status"
    
    if [ "$sshcon_status" = "CONNECTION ESTABLISHED" ]; then
        COPY_EXIT=''
        COPY_EXIT=$(copy_files $1)
        while [ -z "$COPY_EXIT" ]
        do
            if [ $(($TIME_ELAPSED - $EXEC_TIME_LIMIT)) -gt 0 ]; then
                print_log "Execution time exceded provided time limit of $EXEC_TIME_LIMIT seconds.\r\nAbotring.\r\n"
                EXIT_CODE=10
                exit $EXIT_CODE 
            fi
        done
    else
        print_log "Skipping..."
    fi

    PROCESSED_HOSTS=$(( $PROCESSED_HOSTS + 1))

done
print_log "$(printf "====>%d out of %d hosts has beed processed. " "$(($PROCESSED_HOSTS))" "$HOSTS_COUNT")"
print_log "THE TASK HAS COMPLETED."

#set +x
exit $EXIT_CODE
